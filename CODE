#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26


struct TrieNode {
struct TrieNode* children[ALPHABET_SIZE];
int count;
};


struct TrieNode* createTrieNode();
void insert(struct TrieNode* root, char* word);
int numberOfOccurrences(struct TrieNode* root, char* word);
void deallocateTrie(struct TrieNode* root);
struct TrieNode* createTrie();
int readDictionary(char* filename, char** pInWords);


struct TrieNode* createTrieNode() {
struct TrieNode* newNode = (struct TrieNode*)malloc(sizeof(struct TrieNode));
if (newNode) {
for (int i = 0; i < ALPHABET_SIZE; i++) {
newNode->children[i] = NULL;
}
newNode->count = 0;
}
return newNode;
}

void insert(struct TrieNode* root, char* word) {
if (!root || !word)
return;

struct TrieNode* curr = root;
for (int i = 0; word[i] != '\0'; i++) {
int index = word[i] - 'a';
if (index < 0 || index >= ALPHABET_SIZE) {
continue;
}
if (curr->children[index] == NULL) {
curr->children[index] = createTrieNode();
}
curr = curr->children[index];
}
curr->count++;
}


int numberOfOccurrences(struct TrieNode* root, char* word) {
if (!root || !word)
return 0;

struct TrieNode* curr = root;
for (int i = 0; word[i] != '\0'; i++) {
int index = word[i] - 'a';
if (index < 0 || index >= ALPHABET_SIZE || curr->children[index] == NULL) {
return 0;
}
curr = curr->children[index];
}
return curr->count;
}


void deallocateTrie(struct TrieNode* root) {
if (!root) {
return;
}
for (int i = 0; i < ALPHABET_SIZE; i++) {
deallocateTrie(root->children[i]);
}
free(root);
}

struct TrieNode* createTrie() {
struct TrieNode* root = createTrieNode();
return root;
}

int readDictionary(char* filename, char** pInWords) {
FILE* fp;
int numWords = 0;
char word[256];

fp = fopen(filename, "r");
if (fp == NULL) {
perror("Error opening file");
exit(1);
}

fscanf(fp, "%d", &numWords);

for (int i = 0; i < numWords; ++i) {
fscanf(fp, "%s", word);
pInWords[i] = strdup(word);
}

fclose(fp);
return numWords;
}

int main(void) {
char* inWords[256];
int numWords = readDictionary("dictionary.txt", inWords);

printf("%d\n", numWords);
for (int i = 0; i < numWords; ++i)
printf("%s\n", inWords[i]);

struct TrieNode* root = createTrie();


for (int i = 0; i < numWords; i++)
insert(root, inWords[i]);


char* pWords[] = { "notaword", "ucf", "no", "note", "corg" };
for (int i = 0; i < 5; i++)
printf("\t%s %d\n", pWords[i], numberOfOccurrences(root, pWords[i]));

deallocateTrie(root);


for (int i = 0; i < numWords; ++i)
free(inWords[i]);

return 0;
}
